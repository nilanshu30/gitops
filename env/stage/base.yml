services:
  agent:
    image: portainer/agent:2.21.5
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - agent_network
    deploy:
      labels:
        - "traefik.enable=false"
      mode: global
      placement:
        constraints: [node.platform.os == linux]
      update_config:
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    # healthcheck:
    #   test: ["CMD", "curl", "--silent", "--fail", "http://localhost:9001"]
    #   interval: 30s
    #   retries: 3
    #   start_period: 5s
    #   timeout: 10s

  portainer:
    image: portainer/portainer-ce:2.21.5
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - agent_network
      - public
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.portainer.rule=Host(`portainer.nilanshu.xyz`)"
        - "traefik.http.routers.portainer.service=portainer"
        - "traefik.http.services.portainer.loadbalancer.server.port=9000"
        - "traefik.http.services.portainer.loadbalancer.healthcheck.path=/"
        - "traefik.http.services.portainer.loadbalancer.healthcheck.interval=10s"
        - "traefik.http.services.portainer.loadbalancer.healthcheck.timeout=5s"
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
      update_config:
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    # healthcheck:
    #   test: ["CMD", "curl", "--silent", "--fail", "http://localhost:9000"]
    #   interval: 30s
    #   retries: 3
    #   start_period: 5s
    #   timeout: 10s
  
  traefik:
    image: traefik:v3.3
    ports:
      - 80:80
      - 443:443
      # - 8080:8080
    networks:
      - public
    command:
      - "--entryPoints.http.address=:80"
      - "--entryPoints.https.address=:443"
      - "--ping=true"
      - "--log.level=DEBUG"
      - "--providers.swarm=true"
      - "--providers.swarm.network=public"
      - "--api.insecure=true"
      - "--api.dashboard=true"
    deploy:
      labels:
        - "traefik.enable=true"
        # - "traefik.http.middlewares.test-compress.compress=true"
        - "traefik.http.routers.dashboard.rule=Host(`console.nilanshu.xyz`)"
        - "traefik.http.routers.dashboard.service=api@internal"
        - "traefik.http.services.dashboard.loadbalancer.server.port=8080"
        - "traefik.http.routers.ping.rule=Path(`/ping`)"
        - "traefik.http.routers.ping.service=ping@internal"
        - "traefik.http.services.ping.loadbalancer.server.port=8080"
      mode: replicated
      replicas: 1
      update_config:
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.role == manager
    # healthcheck:
    #   test: ["CMD", "curl", "--silent", "--fail", "http://localhost:8080/ping"]
    #   interval: 30s
    #   retries: 3
    #   start_period: 5s
    #   timeout: 10s
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  whoami:
    image: traefik/whoami:v1.10
    networks:
      - public
    deploy:
      mode: replicated
      replicas: 1
      labels:
        - "traefik.enable=true"
        - "traefik.http.services.whoami.loadbalancer.server.port=80"
        - "traefik.http.routers.whoami.rule=Host(`whoami.nilanshu.xyz`)"
        - "traefik.http.services.whoami.loadbalancer.healthcheck.path=/health"
        - "traefik.http.services.whoami.loadbalancer.healthcheck.interval=10s"
        - "traefik.http.services.whoami.loadbalancer.healthcheck.timeout=5s"
      update_config:
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    # healthcheck:
    #   test: ["CMD", "curl", "--silent", "--fail", "http://localhost:80"]
    #   interval: 30s
    #   retries: 3
    #   start_period: 5s
    #   timeout: 10s

networks:
  agent_network:
    name: agent_network
    driver: overlay
    attachable: true
  public:
    name: public
    driver: overlay
    attachable: true

